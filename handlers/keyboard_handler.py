from os import link
import logging
from keyboards import personal_acc as per_acc
from aiogram import F, Router, Bot
from aiogram.types import CallbackQuery, Message
from dataclasses import dataclass, asdict
from typing import Optional
from status.status_keys import get_message_by_status
from datetime import datetime
from marzban.Backend import MarzbanBackendContext
from refferal.refferal_logic import generate_refferal_code
from db.db_inject import db_manager as db
from db.db_model import User
from aiogram.types import LabeledPrice
from config_data.config import load_config
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, PreCheckoutQuery
from redis_bot.redis_main import RedisUserCache, get_user_cache_from_redis, update_redis_user_cache_field, UserCache
from aiogram.filters import CommandStart, CommandObject, Command
from typing import Dict, Any
import time

logger = logging.getLogger(__name__)
format='[%(asctime)s] #%(levelname)-15s %(filename)s: %(lineno)d - %(pathname)s - %(message)s'
logging.basicConfig(level=logging.INFO, format=format)

#####################################
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
#####################################
DAYS_PER_REFERRAL = 1
TRIAL_DAYS = 3

redis_cache = RedisUserCache()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
config = load_config('.env')
bot_token = config.tg_bot.token
BOT_TOKEN = bot_token

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
router = Router()

#####################################
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
#####################################

async def update_cache_fix(redis_cache: RedisUserCache, user_id: int, data: Dict[str, Any], **kwargs):
   """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
   default_data = UserCache(
       user_id=user_id,
       balance=data.balance,
       trial=data.trial,
       link=data.link,
       subscription_end=data.subscription_end,
       trial_end=data.trial_end,
       referral_count=data.referral_count
   )
   current_data = asdict(default_data)
   current_data.update(kwargs)
   output = await update_redis_user_cache_field(redis_cache, **current_data)
   return output

async def update_db(data: Dict[str, Any], **kwargs):
   """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
   try:
       current = data
       current_dict = asdict(current)
       current_dict.update(kwargs)
       update_data = User(**current_dict)
       await db.update_user(update_data)
       logging.info(f"–ë–î –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_dict.get('user_id')}: {kwargs}")
       return update_data
   except Exception as e:
       logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_dict.get('user_id', 'unknown')}: {e}")
       raise

async def always_cache(redis_cache: RedisUserCache, user_id: int, username: str):
   """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –∫—ç—à –∏–∑ –ë–î"""
   start_time = time.time()
   try:
       user_cache = await get_user_cache_from_redis(redis_cache, user_id)
       if user_cache:
           user_data = user_cache
           logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–µ–Ω –∏–∑ –∫—ç—à–∞ –∑–∞ {time.time() - start_time:.3f}—Å")
       else:
           data_db = await db.get_user(user_id)
           if not data_db:
               data_db = await db.get_or_create_user(user_id, username)
               logging.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}")
           user_data = await update_cache_fix(redis_cache, user_id, data_db)
           logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∫—ç—à–∏—Ä–æ–≤–∞–Ω –∏–∑ –ë–î –∑–∞ {time.time() - start_time:.3f}—Å")
       return user_data
   except Exception as e:
       logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
       raise

async def safe_marzban_operation(user_id_str: str, operation_data: dict, operation_name: str):
   """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å Marzban"""
   try:
       async with MarzbanBackendContext() as backend:
           res = await backend.get_user(user_id_str)
           if res:
               new_link = res['subscription_url']
               await backend.modify_user(user_id_str, operation_data)
           else:
               res = await backend.create_user(user_id_str)
               new_link = res['subscription_url']
               await backend.modify_user(user_id_str, operation_data)

           logging.info(f"Marzban –æ–ø–µ—Ä–∞—Ü–∏—è '{operation_name}' —É—Å–ø–µ—à–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str}")
           return new_link, True
   except Exception as e:
       logging.error(f"–û—à–∏–±–∫–∞ Marzban –æ–ø–µ—Ä–∞—Ü–∏–∏ '{operation_name}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str}: {e}")
       return None, False

async def process_referral_bonus(user_id: int):
   """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å - –ø–æ–º–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ eligible"""
   try:
       success = await db.update_referral_bonus(user_id)
       if success:
           logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ eligible –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤")
       return success
   except Exception as e:
       logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
       return False

def validate_positive_int(value: int, name: str) -> bool:
   """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞"""
   if not isinstance(value, int) or value <= 0:
       logging.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ {name}: {value}")
       return False
   return True

#####################################
# –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
#####################################

def create_personal_acc_text(balance: int = 0, subscription_end: int = 0) -> str:
   current_date = int(datetime.timestamp(datetime.now()))
   balance_text = balance if balance else 0
   if current_date > subscription_end:
       sub_text = 0
       hours = 0
   else:
       sub_text = (subscription_end - current_date)//86400 if subscription_end else 0
       hours = ((subscription_end - current_date)//3600 - sub_text * 24) if subscription_end else 0
   return f"""
üìä –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç

üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –≤ —Å–µ—Ä–≤–∏—Å–µ: {balance_text} ‚ÇΩ
üìà –î–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: {int(sub_text)} | –ß–∞—Å–æ–≤: {int(hours)}
   """.strip()

def help_message(amount: int):
   keyboard = InlineKeyboardMarkup(inline_keyboard=[
       [InlineKeyboardButton(text=f"–û–ø–ª–∞—Ç–∏—Ç—å {amount} ‚≠ê", pay=True)],
       [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_menu_in_payment")]
   ])
   return keyboard

#####################################
# –•—ç–Ω–¥–ª–µ—Ä—ã
#####################################

@router.callback_query(F.data == 'trial_per')
async def trial_per(callback: CallbackQuery, redis_cache: RedisUserCache):
   current_date = int(datetime.timestamp(datetime.now()))
   user_id = callback.from_user.id

   await callback.message.edit_text(
       text="–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞...",
       reply_markup=None
   )

   try:
       data_db = await db.get_user(user_id)
       if not data_db:
           raise ValueError(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")

       if current_date > data_db.subscription_end:
           new_date = current_date + (TRIAL_DAYS * 86400)
       else:
           new_date = data_db.subscription_end + (TRIAL_DAYS * 86400)

       if not validate_positive_int(new_date, "trial_end_date"):
           raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞")

       # –û–ø–µ—Ä–∞—Ü–∏—è —Å Marzban
       new_link, marzban_success = await safe_marzban_operation(
           str(user_id),
           {'expire': new_date},
           "trial_activation"
       )

       if not marzban_success:
           await callback.message.edit_text(
               text="‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
               reply_markup=None
           )
           return

       # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î
       data_db = await update_db(
           data_db,
           subscription_end=new_date,
           link=new_link,
           trial='in_progress',
           trial_end=new_date
       )

       # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
       user_data = await update_cache_fix(redis_cache, user_id, data_db)

       # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å (—Ç–æ–ª—å–∫–æ –Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –ë–î)
       await process_referral_bonus(user_id)

       # –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
       await db.log_user_action(user_id, callback.data)

       message = get_message_by_status('start_menu', user_data.trial, user_data.subscription_end, user_data.balance)
       await callback.message.edit_text(
           text=message['text'],
           reply_markup=message['keyboard']
       )

   except Exception as e:
       logging.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
       await callback.message.edit_text(
           text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
           reply_markup=None
       )

@router.callback_query(F.data == 'personal_acc')
async def personal_acc(callback: CallbackQuery, redis_cache: RedisUserCache):
   current_date = int(datetime.timestamp(datetime.now()))
   user_id = callback.from_user.id
   username = callback.from_user.username

   try:
       user_data = await always_cache(redis_cache, user_id, username)

       # –°—á–∏—Ç–∞–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
       cnt = await db.count_unused_referrals(user_id)
       out = cnt if cnt else '–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ'

       await callback.message.edit_text(
           text=f'–ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç... \n\n\n –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {out}',
           reply_markup=None
       )

       if cnt and (user_data.balance or user_data.trial != 'never_used'):
           # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏
           if user_data.subscription_end > current_date:
               modified_data = user_data.subscription_end
           else:
               modified_data = current_date

           modified_data += 86400 * DAYS_PER_REFERRAL * cnt

           if not validate_positive_int(modified_data, "referral_bonus_date"):
               logging.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –±–æ–Ω—É—Å–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
           else:
               # –û–ø–µ—Ä–∞—Ü–∏—è —Å Marzban
               new_link, marzban_success = await safe_marzban_operation(
                   str(user_id),
                   {'expire': modified_data},
                   "referral_bonus"
               )

               if marzban_success:
                   # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î
                   data_db = await db.get_user(user_id)
                   await update_db(data_db, subscription_end=modified_data)

                   # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                   user_data = await update_cache_fix(
                       redis_cache,
                       user_id,
                       user_data,
                       subscription_end=modified_data
                   )

                   # –ü–æ–º–µ—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ —É—Å–ø–µ—Ö–∞
                   marked_count = await db.mark_referrals_as_used(user_id)
                   if marked_count != cnt:
                       logging.warning(f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: —Å—á–∏—Ç–∞–ª–∏ {cnt}, –ø–æ–º–µ—Ç–∏–ª–∏ {marked_count}")
               else:
                   logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∏—Å–ª–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} - Marzban –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

       text_message = create_personal_acc_text(user_data.balance, user_data.subscription_end)
       link = user_data.link if user_data.link and (user_data.trial != 'never_used' or user_data.subscription_end) else "–ü–æ–∫–∞ –ø—É—Å—Ç–æ."

       if user_data.trial == 'never_used':
           keyboard = per_acc.VPNPersAccKeyboards.personal_acc_new()
       else:
           keyboard = per_acc.VPNPersAccKeyboards.personal_acc()

       await db.log_user_action(user_id, callback.data)

       await callback.message.edit_text(
           text=f'{text_message} \n\n –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É: {link}',
           reply_markup=keyboard
       )

   except Exception as e:
       logging.error(f"–û—à–∏–±–∫–∞ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
       await callback.message.edit_text(
           text="‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
           reply_markup=None
       )

@router.callback_query(F.data == 'start_menu_in_payment')
async def start_menu_in_payment(callback: CallbackQuery, redis_cache: RedisUserCache):
   user_id = callback.from_user.id
   username = callback.from_user.username

   try:
       user_data = await always_cache(redis_cache, user_id, username)
       message = get_message_by_status('start_menu', user_data.trial, user_data.subscription_end, user_data.balance)

       await callback.message.delete()
       await callback.message.answer(
           text=message['text'],
           reply_markup=message['keyboard']
       )
   except Exception as e:
       logging.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

@router.callback_query(F.data.in_(["to_pay_year", "to_pay_6_months", "to_pay_3_months", "to_pay_month"]))
async def handler_payment_success(callback: CallbackQuery, redis_cache: RedisUserCache):
   user_id = callback.from_user.id
   username = callback.from_user.username

   try:
       user_data = await always_cache(redis_cache, user_id, username)

       plan = {
           "to_pay_year": 360,
           "to_pay_6_months": 180,
           "to_pay_3_months": 90,
           "to_pay_month": 30
       }

       if callback.data not in plan:
           logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω –ø–ª–∞—Ç–µ–∂–∞: {callback.data}")
           return

       # –ü–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ eligible –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
       await process_referral_bonus(user_id)

       await db.log_user_action(user_id, callback.data)
       await callback.message.delete()

       # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Marzban –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∏–Ω–≤–æ–π—Å–∞
       _, marzban_available = await safe_marzban_operation(
           str(user_id),
           {},  # –ü—É—Å—Ç–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
           "connection_check"
       )

       if marzban_available:
           prices = [LabeledPrice(label="–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞", amount=1)]
           await callback.message.answer_invoice(
               title=f"üí´ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {plan[callback.data] // 30} –º–µ—Å—è—Ü–µ–≤.",
               description=f'–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å —Å—É–º–º—É –Ω–∏–∂–µ.',
               payload=callback.data,
               currency="XTR",
               prices=prices,
               start_parameter="premium_payment",
               reply_markup=help_message(1)
           )
       else:
           message = get_message_by_status("payment_unsuccess", user_data.trial, user_data.subscription_end, user_data.balance)
           await callback.message.answer(
               text=f"{message['text']}\n\n‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
               reply_markup=message['keyboard']
           )

   except Exception as e:
       logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

@router.pre_checkout_query()
async def pre_checkout_query(pre_checkout: PreCheckoutQuery, bot: Bot):
   await bot.answer_pre_checkout_query(pre_checkout.id, ok=True)

@router.message(F.successful_payment)
async def successful_payment(message: Message, redis_cache: RedisUserCache):
   payment = message.successful_payment
   user_id = message.from_user.id
   charge_id = payment.telegram_payment_charge_id
   invoice = payment.invoice_payload
   username = message.from_user.username

   try:
       user_data = await always_cache(redis_cache, user_id, username)
       current_date = int(datetime.timestamp(datetime.now()))

       plan = {
           "to_pay_year": 600,
           "to_pay_6_months": 300,
           "to_pay_3_months": 150,
           "to_pay_month": 50
       }

       if invoice not in plan:
           logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω –≤ –ø–ª–∞—Ç–µ–∂–µ: {invoice}")
           await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
           return

       amount = plan[invoice]

       # –õ–æ–≥–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂
       await db.create_payment(user_id, amount, "success", charge_id)

       # –ü–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ eligible –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
       await process_referral_bonus(user_id)

       new_balance = user_data.balance + amount

       if current_date > user_data.subscription_end:
           #new_date = current_date + (amount * 86400 * 30) // 50
            # –î–ª—è —Ç–µ—Å—Ç–∞ –ø–æ—Å—Ç–∞–≤–∏–º –ø–æ–ª –¥–Ω—è –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤
           new_date = current_date + (amount * 3600 * 6) // 50
       else:
           #new_date = user_data.subscription_end + (amount * 86400 * 30) // 50
           new_date = user_data.subscription_end + (amount * 3600 * 6) // 50

       if not validate_positive_int(new_date, "subscription_end_date"):
           raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏")

       # –û–ø–µ—Ä–∞—Ü–∏—è —Å Marzban
       new_link, marzban_success = await safe_marzban_operation(
           str(user_id),
           {'expire': new_date},
           "payment_processing"
       )

       if not marzban_success:
           await message.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
           return

       # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
       user_data = await update_cache_fix(
           redis_cache,
           user_id,
           user_data,
           balance=new_balance,
           subscription_end=new_date,
           link=new_link
       )

       # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î
       data_db = await db.get_user(user_id)
       await update_db(data_db, balance=new_balance, subscription_end=new_date, link=new_link)

       messages = get_message_by_status('start_menu', user_data.trial, user_data.subscription_end, user_data.balance)

       await message.answer(
           text=messages['text'],
           reply_markup=messages['keyboard']
       )

   except Exception as e:
       logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
       await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

@router.callback_query(F.data.in_(['buy_key', 'buy_key_in_install']))
async def buy_key(callback: CallbackQuery, redis_cache: RedisUserCache):
   user_id = callback.from_user.id
   username = callback.from_user.username

   try:
       user_data = await always_cache(redis_cache, user_id, username)
       message = get_message_by_status(callback.data, user_data.trial, user_data.subscription_end, user_data.balance)

       await db.log_user_action(user_id, callback.data)

       await callback.message.edit_text(
           text=message['text'],
           reply_markup=message['keyboard']
       )
   except Exception as e:
       logging.error(f"–û—à–∏–±–∫–∞ –≤ buy_key –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

@router.callback_query(F.data.in_(['invite_in_install', 'invite']))
async def invite_handler(callback: CallbackQuery, redis_cache: RedisUserCache):
   user_id = callback.from_user.id
   username = callback.from_user.username

   try:
       user_data = await always_cache(redis_cache, user_id, username)
       message = get_message_by_status(callback.data, user_data.trial, user_data.subscription_end, user_data.balance)
       ref_link = generate_refferal_code(user_id)

       await db.log_user_action(user_id, callback.data)

       await callback.message.edit_text(
           text=f"{message['text']} \n\n\n {ref_link}",
           reply_markup=message['keyboard']
       )
   except Exception as e:
       logging.error(f"–û—à–∏–±–∫–∞ –≤ invite_handler –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

@router.callback_query()
async def universal_handler(callback: CallbackQuery, redis_cache: RedisUserCache):
   user_id = callback.from_user.id
   username = callback.from_user.username

   try:
       user_data = await always_cache(redis_cache, user_id, username)
       current_date = int(datetime.timestamp(datetime.now()))

       # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
       if user_data.trial == 'in_progress' and current_date > user_data.subscription_end:
           data_db = await db.get_user(user_id)
           new_data = await update_db(data_db, trial='expired')
           user_data = await update_cache_fix(redis_cache, user_id, new_data)

       await db.log_user_action(user_id, callback.data)

       message = get_message_by_status(callback.data, user_data.trial, user_data.subscription_end, user_data.balance)
       await callback.message.edit_text(
           text=message['text'],
           reply_markup=message['keyboard']
       )
   except Exception as e:
       logging.error(f"–û—à–∏–±–∫–∞ –≤ universal_handler –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

@router.message(CommandStart())
async def process_start_command(message: Message, command: CommandObject, redis_cache: RedisUserCache):
   ref_id = command.args
   user_id = message.from_user.id
   username = message.from_user.username

   try:
       user_cache = await get_user_cache_from_redis(redis_cache, user_id)
       if user_cache:
           user_data = user_cache
       else:
           data = await db.get_user(user_id)
           if not data:
               data = await db.get_or_create_user(user_id, username)
           user_data = await update_cache_fix(redis_cache, user_id, data)

           # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –≤–∏–∑–∏—Ç–∞ –∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
           if not data.first_visit_completed:
               data = await update_db(data, first_visit_completed=True)

               if ref_id:
                   try:
                       ref_id_int = int(ref_id)
                       if ref_id_int == user_id:
                           logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ—é –∂–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É")
                       else:
                           referral_success = await db.create_referral(ref_id_int, user_id)
                           if referral_success:
                               logging.info(f"–°–æ–∑–¥–∞–Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–≤—è–∑—å: {ref_id_int} -> {user_id}")
                           else:
                               logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–≤—è–∑—å: {ref_id_int} -> {user_id}")
                   except (ValueError, TypeError) as e:
                       logging.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π ID: {ref_id}, –æ—à–∏–±–∫–∞: {e}")

       message_text = get_message_by_status('start_menu', user_data.trial, user_data.subscription_end)
       await db.log_user_action(user_id, "", message.text)

       await message.answer(
           text=message_text['text'],
           reply_markup=message_text['keyboard']
       )

   except Exception as e:
       logging.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å—Ç–∞—Ä—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
       # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
       try:
           fallback_message = get_message_by_status('start_menu', 'never_used', 0)
           await message.answer(
               text=fallback_message['text'],
               reply_markup=fallback_message['keyboard']
           )
       except:
           await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(Command('paybeck'))
async def process_paybeck_command(message: Message, bot: Bot, command: CommandObject):
   try:
       await bot.refund_star_payment(message.from_user.id, command.args)
   except Exception as e:
       logging.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞: {e}")
       await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
