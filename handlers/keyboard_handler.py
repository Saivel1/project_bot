from keyboards import vpn_keyboards as vpn, start_menu, help_keyboards as help_k, personal_acc as per_acc, refferal
from aiogram import F, Router
from aiogram.types import CallbackQuery, Message
import re
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from dataclasses import dataclass, asdict
from typing import Optional

@dataclass(slots=True, frozen=True)
class UserData:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è FSMContext"""
    email: Optional[str] = None
    balance: int = 0
    status: str = 'inactive'
    subscription_end: Optional[str] = None
    nickname: Optional[str] = None
    referral_count: int = 0
    last_activity: Optional[float] = None

async def get_user_data(state: FSMContext) -> UserData:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ FSM –∫–∞–∫ dataclass"""
    data = await state.get_data()
    return UserData(
        email=data.get('email'),
        balance=data.get('balance', 0),
        status=data.get('status', 'inactive'),
        subscription_end=data.get('subscription_end'),
        nickname=data.get('nickname'),
        referral_count=data.get('referral_count', 0),
        last_activity=data.get('last_activity')
    )

async def save_user_data(state: FSMContext, user_data: UserData):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç dataclass –≤ FSM"""
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º dataclass –≤ —Å–ª–æ–≤–∞—Ä—å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    await state.update_data(**asdict(user_data))



class EmailForm(StatesGroup):
    waiting_for_email = State()

class NicknameForm(StatesGroup):
    waiting_for_nickname = State()

SIMPLE_EMAIL_PATTERN = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
NICKNAME_PATTERN = r'@[a-zA-Z0-9._%+-]+'

router = Router()

# –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
ALL_MESSAGES = {
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ–Ω—é
    'start_menu': {
        'text': 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        'keyboard': start_menu.start_menu_keyboard()
    },
    'not_paid': {
        'text': 'üîí VPN –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∫–ª—é—á.',
        'keyboard': vpn.VPNInstallKeyboards.not_paid_install()
    },
    'install_vpn': {
        'text': '‚úÖ VPN –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏:',
        'keyboard': vpn.VPNInstallKeyboards.choose_platform('start_menu')
    },
    'android': {
        'text': 'ü§ñ Android\n\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–ª—è Android...',
        'keyboard': vpn.VPNInstallKeyboards.android_platform()
    },
    'ios': {
        'text': 'üçé iOS/MacOS\n\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–ª—è iOS/MacOS...',
        'keyboard': vpn.VPNInstallKeyboards.ios_platform()
    },
    'windows': {
        'text': 'ü™ü Windows\n\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–ª—è Windows...',
        'keyboard': vpn.VPNInstallKeyboards.windows_platform()
    },
    'extend_sub': {
        'text': '–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
        'keyboard': per_acc.VPNPersAccKeyboards.choose_plan_menu('start_menu')
    },

    # –ü–æ–º–æ—â—å
    'help': {
        'text': '–ü–æ–º–æ—â—å –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—Å—ë, —á—Ç–æ –∫–∞—Å–∞–µ—Ç—Å—è –ø–æ–º–æ—â–∏',
        'keyboard': help_k.HelpKeyboards.help_main()
    },
    'help_install_vpn': {
        'text': '–≠—Ç–æ –∫–Ω–æ–ø–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏ "help_install_vpn" \n\n –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —É—Å—Ç–∞–Ω–æ–≤–∫–∞ VPN',
        'keyboard': help_k.HelpKeyboards.help_install_vpn()
    },
    'help_per_acc': {
        'text': '–≠—Ç–æ –∫–Ω–æ–ø–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏ "help_per_acc" \n\n –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π –∏–ª–∏ –õ–ö',
        'keyboard': help_k.HelpKeyboards.help_per_acc()
    },
    'help_period': {
        'text': '–≠—Ç–æ –∫–Ω–æ–ø–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏ "help_per_acc" \n\n –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º',
        'keyboard': help_k.HelpKeyboards.help_period()
    },
    'help_refferal': {
        'text': '–≠—Ç–æ –∫–Ω–æ–ø–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏ "help_per_acc" \n\n –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π',
        'keyboard': help_k.HelpKeyboards.help_refferal()
    },

    # –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
    'change_email': {
        'text': '–ù–∞–ø–∏—à–∏ —Å–≤–æ–π email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –Ω–∏–∫–Ω–µ–π–º@–ø–æ—á—Ç–∞.',
        'keyboard': per_acc.VPNPersAccKeyboards.change_email()
    },
    'buy_key': {
        'text': '–í—ã–±–µ—Ä–∏ –ø–æ–¥–ø–∏—Å–∫—É',
        'keyboard': per_acc.VPNPersAccKeyboards.choose_plan_menu('personal_acc')
    },
    'decline_ch_acc': {
        'text' : '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞',
        'keyboard' : per_acc.VPNPersAccKeyboards.change_email()
    },

    # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
    'refferal': {
        'text': '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞',
        'keyboard': refferal.VPNRefferalKeyboards.refferal_menu()
    },
    'invite': {
        'text': '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞',
        'keyboard': refferal.VPNRefferalKeyboards.invite_menu()
    }
}


def is_valid_email_simple(email: str) -> bool:
    if not email or not isinstance(email, str):
        return False
    return bool(re.match(SIMPLE_EMAIL_PATTERN, email.strip()))

def create_personal_acc_text(balance: int = 0, used: int = 0, email: str = None) -> str:
    email_text = email if email else "–ù–µ —É–∫–∞–∑–∞–Ω"
    balance_text = balance if balance else 0
    return f"""
üìä –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç

üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance_text} ‚ÇΩ
üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used} –ì–ë
üìß –í–∞—à email: {email_text}
    """.strip()

# =============================================================================
# –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –•–≠–ù–î–õ–ï–† –î–õ–Ø –í–°–ï–• –ü–†–û–°–¢–´–• –°–û–û–ë–©–ï–ù–ò–ô
# =============================================================================

@router.callback_query(F.data.in_(list(ALL_MESSAGES.keys())) & ~F.data.in_(["change_email"]))
async def universal_message_handler(callback: CallbackQuery):
    message_data = ALL_MESSAGES[callback.data]
    await callback.message.edit_text(
        text=message_data['text'],
        reply_markup=message_data['keyboard']
    )

# =============================================================================
# –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –•–≠–ù–î–õ–ï–†–´
# =============================================================================

# –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ state
@router.callback_query(F.data == "personal_acc")
async def handler_personal_acc(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    email = data.get('email')
    balance = data.get('balance')

    text = create_personal_acc_text(balance, used, email)
    keyboard = per_acc.VPNPersAccKeyboards.personal_acc()

    await callback.message.edit_text(text, reply_markup=keyboard)

# Email –∑–∞–ø—Ä–æ—Å
@router.callback_query(F.data == "change_email")
async def request_email_with_state(callback: CallbackQuery, state: FSMContext):
    await state.set_state(EmailForm.waiting_for_email)
    await callback.message.answer("üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
    await callback.answer()

# Email –æ–±—Ä–∞–±–æ—Ç–∫–∞
@router.message(EmailForm.waiting_for_email, F.text)
async def process_email(message: Message, state: FSMContext):
    email = message.text.strip()

    if is_valid_email_simple(email):
        await state.update_data(email=email)
        await state.set_state(None)

        keyboard = per_acc.VPNPersAccKeyboards.change_email()
        await message.answer(f"‚úÖ Email {email} —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", reply_markup=keyboard)
    else:
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
@router.callback_query(F.data.in_(["to_pay_year", "to_pay_6_months", "to_pay_3_months", "to_pay_month"]))
async def handler_payment_success(callback: CallbackQuery):
    """–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É—Å—Ç–∞–Ω–æ–≤–∫–∏ VPN"""
    await callback.message.edit_text(
        text='‚úÖ VPN –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏:',
        reply_markup=vpn.VPNInstallKeyboards.choose_platform('personal_acc')
    )

# Nickname –∑–∞–ø—Ä–æ—Å
@router.callback_query(F.data == "swap_acc")
async def request_email_with_state(callback: CallbackQuery, state: FSMContext):
    await state.set_state(NicknameForm.waiting_for_nickname)
    await state.update_data(balance=15)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º:")
    await callback.answer()

# Nickname –æ–±—Ä–∞–±–æ—Ç–∫–∞
@router.message(NicknameForm.waiting_for_nickname, F.text)
async def process_nickname(message: Message, state: FSMContext):
    nickname = message.text.strip()

    if re.match(NICKNAME_PATTERN, nickname):
        await state.set_state(None)
        await state.update_data(nickname=nickname)

        keyboard = per_acc.VPNPersAccKeyboards.changing_nickname()
        await message.answer(f"‚úÖ –ù–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º {nickname}. –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å? \n –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É {"–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"} –Ω–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É –±—É–¥–µ—Ç 0 —Ä—É–±.", reply_markup=keyboard)
    else:
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∏–∫–Ω–µ–π–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

# –û—Ç–º–µ–Ω–∞ —Å–º–µ–Ω—ã –Ω–∏–∫–Ω–µ–π–º–∞
@router.callback_query(F.data == "decline_ch_acc")
async def decline_ch_acc_pressed(callback: CallbackQuery, state: FSMContext):
    await state.update_data(nickname=None)
    await state.set_state(None)
    message = ALL_MESSAGES[callback.data]
    await callback.message.edit_text(
        text=message['text'],
        reply_markup=message['keyboard']
    )

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–º–µ–Ω—ã –Ω–∏–∫–Ω–µ–π–º–∞
@router.callback_query(F.data == "accept_ch_acc")
async def accept_ch_acc_pressed(callback: CallbackQuery, state: FSMContext):
    await state.update_data(balance=0)

    # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
    data = await state.get_data()
    email = data.get('email')
    balance = data.get('balance')  # –ë—É–¥–µ—Ç 0

    text = create_personal_acc_text(balance, used, email)
    keyboard = per_acc.VPNPersAccKeyboards.personal_acc()

    await callback.message.edit_text(
        f"‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —Å–æ–≤–µ—Ä—à–µ–Ω–∞!\n\n{text}",
        reply_markup=keyboard
    )