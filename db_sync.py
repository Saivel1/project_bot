#!/usr/bin/env python3
"""
–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ PostgreSQL –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
Marzban username == user_id –≤ –ë–î
–ö–æ–ª–æ–Ω–∫–∞ —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è 'link'
"""

import asyncpg
import aiohttp
import asyncio
from datetime import datetime
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ PostgreSQL
PG_HOST = "127.0.0.1"
PG_PORT = 5432
PG_USER = "vpn_bot_user"
PG_PASSWORD = "1234"
PG_DATABASE = "vpn_bot_db"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Marzban
NEW_MARZBAN_URL = "https://ivvpn.world:6655"
NEW_MARZBAN_TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJpdiIsImFjY2VzcyI6InN1ZG8iLCJpYXQiOjE3NTI2NzM0ODAsImV4cCI6MTc1Mjc1OTg4MH0.bpzpn3WYl6BiJdH2IVWDHPNpyWkYS8g5DDdAVQ-5c38"

# –î–æ–º–µ–Ω—ã –¥–ª—è –∑–∞–º–µ–Ω—ã
OLD_DOMAIN = "ivvpn.digital"
NEW_DOMAIN = "ivvpn.world"

async def get_db_connection():
    """–°–æ–∑–¥–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL"""
    try:
        conn = await asyncpg.connect(
            host=PG_HOST,
            port=PG_PORT,
            user=PG_USER,
            password=PG_PASSWORD,
            database=PG_DATABASE
        )
        return conn
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
        return None

async def test_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...")
    
    conn = await get_db_connection()
    if not conn:
        return False
    
    try:
        # –¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
        version = await conn.fetchval("SELECT version()")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ!")
        print(f"   PostgreSQL: {version[:80]}...")
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã
        tables = await conn.fetch("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public'
        """)
        
        table_names = [row['table_name'] for row in tables]
        print(f"üìä –ù–∞–π–¥–µ–Ω—ã —Ç–∞–±–ª–∏—Ü—ã: {table_names}")
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã users
        if 'users' in table_names:
            columns = await conn.fetch("""
                SELECT column_name, data_type 
                FROM information_schema.columns 
                WHERE table_name = 'users'
            """)
            
            column_names = [row['column_name'] for row in columns]
            print(f"üìã –ö–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã users: {column_names}")
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            if 'user_id' in column_names:
                print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ 'user_id' –Ω–∞–π–¥–µ–Ω–∞")
            else:
                print("‚ùå –ö–æ–ª–æ–Ω–∫–∞ 'user_id' –ù–ï –Ω–∞–π–¥–µ–Ω–∞")
                
            if 'link' in column_names:
                print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ 'link' –Ω–∞–π–¥–µ–Ω–∞")
            else:
                print("‚ùå –ö–æ–ª–æ–Ω–∫–∞ 'link' –ù–ï –Ω–∞–π–¥–µ–Ω–∞")
                
            # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
            sample = await conn.fetch("SELECT user_id, link FROM users LIMIT 3")
            print(f"\nüìù –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:")
            for row in sample:
                print(f"   user_id: {row['user_id']}, link: {row['link']}")
        
        await conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await conn.close()
        return False

async def backup_users_table():
    """–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–∞–±–ª–∏—Ü—ã users"""
    conn = await get_db_connection()
    if not conn:
        return False
    
    try:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_table = f"users_backup_{timestamp}"
        
        # –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É-–∫–æ–ø–∏—é
        await conn.execute(f"""
            CREATE TABLE {backup_table} AS 
            SELECT * FROM users
        """)
        
        # –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∑–∞–ø–∏—Å–∏
        count = await conn.fetchval(f"SELECT COUNT(*) FROM {backup_table}")
        
        print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_table} ({count} –∑–∞–ø–∏—Å–µ–π)")
        await conn.close()
        return backup_table
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        await conn.close()
        return False

async def get_user_from_panel(session, user_id):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –Ω–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ Marzban
    user_id –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ username –≤ Marzban API
    """
    headers = {"Authorization": f"Bearer {NEW_MARZBAN_TOKEN}"}
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –∫–∞–∫ username –¥–ª—è Marzban API
        async with session.get(
            f"{NEW_MARZBAN_URL}/api/user/{user_id}",
            headers=headers
        ) as response:
            if response.status == 200:
                user_data = await response.json()
                return user_data.get("subscription_url")
            else:
                return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è user_id {user_id}: {e}")
        return None

async def check_subscription_links():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏"""
    conn = await get_db_connection()
    if not conn:
        return
    
    try:
        # –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∑–∞–ø–∏—Å–∏ –ø–æ –¥–æ–º–µ–Ω–∞–º
        stats = await conn.fetchrow("""
            SELECT 
                COUNT(*) as total,
                COUNT(*) FILTER (WHERE link LIKE $1) as old_domain,
                COUNT(*) FILTER (WHERE link LIKE $2) as new_domain,
                COUNT(*) FILTER (WHERE link IS NULL OR link = '') as empty_links
            FROM users
        """, f"%{OLD_DOMAIN}%", f"%{NEW_DOMAIN}%")
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Å—ã–ª–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:")
        print(f"   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total']}")
        print(f"   –°—Ç–∞—Ä—ã–π –¥–æ–º–µ–Ω ({OLD_DOMAIN}): {stats['old_domain']}")
        print(f"   –ù–æ–≤—ã–π –¥–æ–º–µ–Ω ({NEW_DOMAIN}): {stats['new_domain']}")
        print(f"   –ü—É—Å—Ç—ã–µ —Å—Å—ã–ª–∫–∏: {stats['empty_links']}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã
        if stats['old_domain'] > 0:
            print(f"\nüìù –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π —Å–æ —Å—Ç–∞—Ä—ã–º –¥–æ–º–µ–Ω–æ–º:")
            examples = await conn.fetch("""
                SELECT user_id, link 
                FROM users 
                WHERE link LIKE $1 
                LIMIT 5
            """, f"%{OLD_DOMAIN}%")
            
            for row in examples:
                print(f"   user_id: {row['user_id']}, link: {row['link']}")
        
        await conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        await conn.close()

async def update_links_from_panel():
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ–º –∏–∑ –Ω–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ Marzban"""
    
    # –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_table = await backup_users_table()
    if not backup_table:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é. –û—Å—Ç–∞–Ω–æ–≤–∫–∞.")
        return False
    
    conn = await get_db_connection()
    if not conn:
        return False
    
    try:
        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î
        users = await conn.fetch("SELECT user_id FROM users ORDER BY user_id")
        user_ids = [str(row['user_id']) for row in users]  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫–∏
        
        print(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î: {len(user_ids)}")
        
        if not user_ids:
            print("‚ÑπÔ∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            await conn.close()
            return True
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã user_id
        print(f"üìù –ü—Ä–∏–º–µ—Ä—ã user_id: {user_ids[:5]}")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        confirm = input(f"\n‚ùì –û–±–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏ –¥–ª—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –Ω–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏? (yes/no): ")
        if confirm.lower() != 'yes':
            print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            await conn.close()
            return False
        
        # –°–æ–∑–¥–∞—Ç—å HTTP —Å–µ—Å—Å–∏—é
        connector = aiohttp.TCPConnector(ssl=False)
        async with aiohttp.ClientSession(connector=connector) as session:
            
            updated_count = 0
            not_found_count = 0
            error_count = 0
            
            # –ù–∞—á–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            async with conn.transaction():
                for i, user_id in enumerate(user_ids, 1):
                    print(f"[{i}/{len(user_ids)}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º user_id: {user_id}...")
                    
                    # –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏–∑ –Ω–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ (user_id = username –≤ Marzban)
                    new_link = await get_user_from_panel(session, user_id)
                    
                    if new_link:
                        # –û–±–Ω–æ–≤–∏—Ç—å –≤ –ë–î
                        await conn.execute("""
                            UPDATE users 
                            SET link = $1 
                            WHERE user_id = $2
                        """, new_link, int(user_id))
                        
                        updated_count += 1
                        print(f"‚úÖ user_id {user_id}: —Å—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                        
                    elif new_link is None:
                        not_found_count += 1
                        print(f"‚ö†Ô∏è  user_id {user_id}: –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏")
                    else:
                        error_count += 1
                        print(f"‚ùå user_id {user_id}: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    await asyncio.sleep(0.2)
        
        print(f"\nüéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}")
        print(f"‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø–∞–Ω–µ–ª–∏: {not_found_count}")
        print(f"‚ùå –û—à–∏–±–∫–∏: {error_count}")
        print(f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_table}")
        
        await conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        await conn.close()
        return False

async def simple_domain_replacement():
    """–ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ –¥–æ–º–µ–Ω–∞ –≤ —Å—Å—ã–ª–∫–∞—Ö"""
    
    # –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_table = await backup_users_table()
    if not backup_table:
        return False
    
    conn = await get_db_connection()
    if not conn:
        return False
    
    try:
        # –ù–∞–π—Ç–∏ –∑–∞–ø–∏—Å–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –¥–æ–º–µ–Ω–æ–º
        old_records = await conn.fetch("""
            SELECT user_id, link 
            FROM users 
            WHERE link LIKE $1
        """, f"%{OLD_DOMAIN}%")
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∑–∞–º–µ–Ω—ã –¥–æ–º–µ–Ω–∞: {len(old_records)}")
        
        if not old_records:
            print("‚ÑπÔ∏è  –ó–∞–ø–∏—Å–∏ –¥–ª—è –∑–∞–º–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            await conn.close()
            return True
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã
        print(f"\nüìù –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∑–∞–º–µ–Ω—ã:")
        for i, row in enumerate(old_records[:3]):
            print(f"   user_id: {row['user_id']}, link: {row['link']}")
        if len(old_records) > 3:
            print(f"   ... –∏ –µ—â–µ {len(old_records) - 3} –∑–∞–ø–∏—Å–µ–π")
        
        confirm = input(f"\n‚ùì –ó–∞–º–µ–Ω–∏—Ç—å –¥–æ–º–µ–Ω –≤ {len(old_records)} –∑–∞–ø–∏—Å—è—Ö? (yes/no): ")
        if confirm.lower() != 'yes':
            print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
            await conn.close()
            return False
        
        # –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å–∏ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        async with conn.transaction():
            updated_count = 0
            for row in old_records:
                user_id = row['user_id']
                old_url = row['link']
                new_url = old_url.replace(OLD_DOMAIN, NEW_DOMAIN + ":6655")
                
                await conn.execute("""
                    UPDATE users 
                    SET link = $1 
                    WHERE user_id = $2
                """, new_url, user_id)
                
                updated_count += 1
                print(f"‚úÖ user_id {user_id}: {old_url} ‚Üí {new_url}")
        
        print(f"\nüéâ –ó–∞–º–µ–Ω–µ–Ω –¥–æ–º–µ–Ω —É {updated_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print(f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_table}")
        
        await conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await conn.close()
        return False

async def check_users_in_panel():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∫–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –µ—Å—Ç—å –≤ –Ω–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ Marzban"""
    conn = await get_db_connection()
    if not conn:
        return
    
    try:
        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î
        users = await conn.fetch("SELECT user_id FROM users ORDER BY user_id")
        user_ids = [str(row['user_id']) for row in users]
        
        print(f"üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –Ω–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏...")
        print(f"üìù –ü—Ä–∏–º–µ—Ä—ã user_id: {user_ids[:5]}")
        
        connector = aiohttp.TCPConnector(ssl=False)
        async with aiohttp.ClientSession(connector=connector) as session:
            
            found_count = 0
            not_found_count = 0
            
            for user_id in user_ids:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –∫–∞–∫ username –≤ Marzban API
                subscription_url = await get_user_from_panel(session, user_id)
                
                if subscription_url:
                    found_count += 1
                    print(f"‚úÖ user_id {user_id}: –µ—Å—Ç—å –≤ –ø–∞–Ω–µ–ª–∏ Marzban")
                else:
                    not_found_count += 1
                    print(f"‚ùå user_id {user_id}: –ù–ï–¢ –≤ –ø–∞–Ω–µ–ª–∏ Marzban")
                
                await asyncio.sleep(0.1)
        
        print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:")
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ –ø–∞–Ω–µ–ª–∏: {found_count}")
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {not_found_count}")
        
        await conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        await conn.close()

async def show_backup_tables():
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏"""
    conn = await get_db_connection()
    if not conn:
        return
    
    try:
        # –ù–∞–π—Ç–∏ —Ç–∞–±–ª–∏—Ü—ã –±—ç–∫–∞–ø–æ–≤
        backup_tables = await conn.fetch("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_name LIKE 'users_backup_%'
            ORDER BY table_name DESC
        """)
        
        if backup_tables:
            print(f"üíæ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏:")
            for row in backup_tables:
                table_name = row['table_name']
                count = await conn.fetchval(f"SELECT COUNT(*) FROM {table_name}")
                print(f"   {table_name} ({count} –∑–∞–ø–∏—Å–µ–π)")
        else:
            print("‚ÑπÔ∏è  –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        await conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await conn.close()

async def update_specific_users(user_ids):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    backup_table = await backup_users_table()
    if not backup_table:
        return False
    
    conn = await get_db_connection()
    if not conn:
        return False
    
    try:
        connector = aiohttp.TCPConnector(ssl=False)
        async with aiohttp.ClientSession(connector=connector) as session:
            
            updated_count = 0
            
            for user_id in user_ids:
                print(f"üì§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º user_id: {user_id}...")
                
                # –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏–∑ –ø–∞–Ω–µ–ª–∏ (user_id = username –≤ Marzban)
                new_link = await get_user_from_panel(session, user_id)
                
                if new_link:
                    # –û–±–Ω–æ–≤–∏—Ç—å –≤ –ë–î
                    await conn.execute("""
                        UPDATE users 
                        SET link = $1 
                        WHERE user_id = $2
                    """, new_link, int(user_id))
                    
                    updated_count += 1
                    print(f"‚úÖ user_id {user_id}: —Å—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –ø–∞–Ω–µ–ª–∏")
                else:
                    print(f"‚ùå user_id {user_id}: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É")
                
                await asyncio.sleep(0.2)
        
        print(f"\nüéâ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print(f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_table}")
        
        await conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await conn.close()
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ PostgreSQL")
    print(f"üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {PG_HOST}:{PG_PORT}/{PG_DATABASE}")
    print(f"üåê –ù–æ–≤–∞—è –ø–∞–Ω–µ–ª—å: {NEW_MARZBAN_URL}")
    print(f"üîó –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: user_id (–ë–î) = username (Marzban)")
    print("="*60)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1:
        if sys.argv[1] == "test":
            await test_connection()
            return
        elif sys.argv[1] == "check":
            await check_subscription_links()
            return
        elif sys.argv[1] == "panel":
            await check_users_in_panel()
            return
        elif sys.argv[1] == "domain":
            await simple_domain_replacement()
            return
        elif sys.argv[1] == "backups":
            await show_backup_tables()
            return
        elif sys.argv[1] == "users":
            if len(sys.argv) < 3:
                print("‚ùå –£–∫–∞–∂–∏—Ç–µ user_id: python script.py users 123456 789012")
                return
            user_ids = sys.argv[2:]
            await update_specific_users(user_ids)
            return
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
    print("1. –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
    print("2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Å—ã–ª–æ–∫")
    print("3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –Ω–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏")
    print("4. –û–±–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ–º –∏–∑ –Ω–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
    print("5. –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ –¥–æ–º–µ–Ω–∞")
    print("6. –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏")
    
    choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-6): ")
    
    if choice == "1":
        await test_connection()
    elif choice == "2":
        await check_subscription_links()
    elif choice == "3":
        await check_users_in_panel()
    elif choice == "4":
        await update_links_from_panel()
    elif choice == "5":
        await simple_domain_replacement()
    elif choice == "6":
        await show_backup_tables()
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    print("üêò –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –≤ PostgreSQL")
    print("üìã user_id –∏–∑ –ë–î –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ username –≤ Marzban API")
    asyncio.run(main())
