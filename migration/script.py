import asyncio
import asyncpg
import logging
import time
from typing import Dict, List, Optional
import aiohttp
from datetime import datetime, timezone

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
format = '[%(asctime)s] #%(levelname)-15s %(filename)s: %(lineno)d - %(message)s'
logging.basicConfig(level=logging.INFO, format=format)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ Marzban
MARZBAN_API_URL = "https://ivvpn.world:6655"
MARZBAN_USER = "iv"
MARZBAN_PASSWORD = "URV3dEbbpK"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_CONFIG = {
    'host': '127.0.0.1',           # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ö–æ—Å—Ç –ë–î
    'port': 5432,                  # –ü–æ—Ä—Ç PostgreSQL
    'database': 'vpn_bot_db',   # –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –ë–î
    'user': 'vpn_bot_user',          # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ë–î
    'password': '1234'    # –ü–∞—Ä–æ–ª—å –ë–î
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î (–Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–æ–¥ –≤–∞—à—É —Å—Ö–µ–º—É)
DB_SETTINGS = {
    'table_name': 'users',                    # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    'user_id_column': 'user_id',             # –ö–æ–ª–æ–Ω–∫–∞ —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (= username –∏–∑ –ø–∞–Ω–µ–ª–∏)
    'username_column': 'username',            # –ö–æ–ª–æ–Ω–∫–∞ —Å username (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π)
    'expire_column': 'subscription_end',      # –ö–æ–ª–æ–Ω–∫–∞ —Å –¥–∞—Ç–æ–π –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ (bigint timestamp)
    'status_column': 'status_bot',            # –ö–æ–ª–æ–Ω–∫–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –±–æ—Ç–∞
    'created_at_column': 'created_at'         # –ö–æ–ª–æ–Ω–∫–∞ —Å –≤—Ä–µ–º–µ–Ω–µ–º —Å–æ–∑–¥–∞–Ω–∏—è
}

class MarzbanAPI:
    def __init__(self):
        self.session = None
        self.headers = {"accept": "application/json"}
        self.base_url = MARZBAN_API_URL

    async def __aenter__(self):
        connector = aiohttp.TCPConnector(ssl=False)
        timeout = aiohttp.ClientTimeout(total=30, connect=10)
        
        self.session = aiohttp.ClientSession(
            connector=connector,
            timeout=timeout
        )

        await self.authorize()
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()

    async def authorize(self) -> bool:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –ø–∞–Ω–µ–ª–∏ Marzban"""
        data = {
            "username": MARZBAN_USER,
            "password": MARZBAN_PASSWORD,
        }

        try:
            async with self.session.post(f"{self.base_url}/api/admin/token", data=data) as response:
                if response.status == 200:
                    result = await response.json()
                    token = result.get("access_token")
                    self.headers["Authorization"] = f"Bearer {token}"
                    logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Marzban —É—Å–ø–µ—à–Ω–∞")
                    return True
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Marzban: {response.status}")
                    return False
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False

    async def get_users(self) -> Optional[List[Dict]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ø–∞–Ω–µ–ª–∏"""
        try:
            async with self.session.get(f"{self.base_url}/api/users/", headers=self.headers) as response:
                if response.status in (200, 201):
                    result = await response.json()
                    return result.get('users', [])
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {response.status}")
                    return None
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return None

class DatabaseManager:
    def __init__(self):
        self.pool = None

    async def __aenter__(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î"""
        try:
            self.pool = await asyncpg.create_pool(
                host=DB_CONFIG['host'],
                port=DB_CONFIG['port'],
                database=DB_CONFIG['database'],
                user=DB_CONFIG['user'],
                password=DB_CONFIG['password'],
                min_size=1,
                max_size=10
            )
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return self
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            raise

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        if self.pool:
            await self.pool.close()
            logger.info("üîí –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ")

    async def get_user_by_panel_username(self, panel_username: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –ø–æ username –∏–∑ –ø–∞–Ω–µ–ª–∏ (= user_id –≤ –ë–î)"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º panel_username –≤ —á–∏—Å–ª–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ user_id
            user_id = int(panel_username)
        except ValueError:
            logger.warning(f"‚ö†Ô∏è Username –∏–∑ –ø–∞–Ω–µ–ª–∏ '{panel_username}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º")
            return None
            
        query = f"""
        SELECT {DB_SETTINGS['user_id_column']}, 
               {DB_SETTINGS['username_column']},
               {DB_SETTINGS['expire_column']},
               {DB_SETTINGS['status_column']}
        FROM {DB_SETTINGS['table_name']} 
        WHERE {DB_SETTINGS['user_id_column']} = $1
        """
        
        try:
            async with self.pool.acquire() as conn:
                row = await conn.fetchrow(query, user_id)
                if row:
                    return dict(row)
                return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {panel_username} –∏–∑ –ë–î: {e}")
            return None

    async def update_user_subscription(self, panel_username: str, expire_timestamp: int) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_id = int(panel_username)
        except ValueError:
            logger.error(f"‚ùå Username –∏–∑ –ø–∞–Ω–µ–ª–∏ '{panel_username}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º")
            return False
            
        # –í –≤–∞—à–µ–π –ë–î subscription_end —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ bigint (timestamp), –Ω–µ datetime
        query = f"""
        UPDATE {DB_SETTINGS['table_name']} 
        SET {DB_SETTINGS['expire_column']} = $2
        WHERE {DB_SETTINGS['user_id_column']} = $1
        """
        
        try:
            async with self.pool.acquire() as conn:
                result = await conn.execute(query, user_id, expire_timestamp)
                updated_rows = int(result.split()[-1])
                return updated_rows > 0
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {panel_username}: {e}")
            return False

    async def create_user(self, panel_username: str, expire_timestamp: int) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
        try:
            user_id = int(panel_username)
        except ValueError:
            logger.error(f"‚ùå Username –∏–∑ –ø–∞–Ω–µ–ª–∏ '{panel_username}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º")
            return False
            
        current_timestamp = int(time.time())
        
        query = f"""
        INSERT INTO {DB_SETTINGS['table_name']} (
            {DB_SETTINGS['user_id_column']}, 
            {DB_SETTINGS['username_column']},
            {DB_SETTINGS['status_column']},
            {DB_SETTINGS['created_at_column']},
            {DB_SETTINGS['expire_column']},
            total_spend,
            link,
            trial,
            trial_end,
            referral_count,
            first_visit_completed
        )
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
        """
        
        try:
            async with self.pool.acquire() as conn:
                await conn.execute(query, 
                    user_id,                    # user_id
                    '',                         # username (–ø—É—Å—Ç–æ–π)
                    'active',                   # status_bot
                    current_timestamp,          # created_at
                    expire_timestamp,           # subscription_end
                    0,                          # total_spend
                    '',                         # link
                    'never_used',              # trial
                    0,                          # trial_end
                    0,                          # referral_count
                    False                       # first_visit_completed
                )
                return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {panel_username}: {e}")
            return False

    async def get_database_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –ë–î"""
        try:
            async with self.pool.acquire() as conn:
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                total_users = await conn.fetchval(f"SELECT COUNT(*) FROM {DB_SETTINGS['table_name']}")
                
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ (subscription_end > —Ç–µ–∫—É—â–∏–π timestamp)
                current_timestamp = int(time.time())
                active_users = await conn.fetchval(f"""
                    SELECT COUNT(*) FROM {DB_SETTINGS['table_name']} 
                    WHERE {DB_SETTINGS['expire_column']} > $1
                """, current_timestamp)
                
                return {
                    'total_users': total_users,
                    'active_subscriptions': active_users
                }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î: {e}")
            return {'total_users': 0, 'active_subscriptions': 0}

def timestamp_to_readable(timestamp: int) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è timestamp –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    return datetime.fromtimestamp(timestamp).strftime('%Y-%m-%d %H:%M:%S')

async def migrate_panel_to_database():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–∞–Ω–µ–ª–∏ –≤ –ë–î"""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–∞–Ω–µ–ª–∏ Marzban –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = {
        'panel_users': 0,
        'users_with_subscriptions': 0,
        'users_created': 0,
        'users_updated': 0,
        'users_skipped': 0,
        'errors': 0
    }

    async with MarzbanAPI() as marzban, DatabaseManager() as db:
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î –¥–æ –º–∏–≥—Ä–∞—Ü–∏–∏
        logger.info("üìä –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        db_stats_before = await db.get_database_stats()
        logger.info(f"üìà –ë–î –¥–æ –º–∏–≥—Ä–∞—Ü–∏–∏: {db_stats_before['total_users']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {db_stats_before['active_subscriptions']} –∞–∫—Ç–∏–≤–Ω—ã—Ö")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ø–∞–Ω–µ–ª–∏
        logger.info("üìã –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ø–∞–Ω–µ–ª–∏ Marzban...")
        panel_users = await marzban.get_users()
        
        if not panel_users:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ø–∞–Ω–µ–ª–∏")
            return

        stats['panel_users'] = len(panel_users)
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {stats['panel_users']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–Ω–µ–ª–∏")

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
        current_time = int(time.time())
        users_with_subs = [
            user for user in panel_users 
            if user.get('expire') and user.get('expire') > current_time
        ]
        
        stats['users_with_subscriptions'] = len(users_with_subs)
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {stats['users_with_subscriptions']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for i, panel_user in enumerate(users_with_subs, 1):
            panel_username = panel_user.get('username')  # –≠—Ç–æ –±—É–¥–µ—Ç —á–∏—Å–ª–æ–≤–æ–π ID
            panel_expire = panel_user.get('expire')
            
            if not panel_username or not panel_expire:
                logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {i} –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                stats['errors'] += 1
                continue

            logger.info(f"üîÑ [{i}/{stats['users_with_subscriptions']}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {panel_username}")
            logger.info(f"   üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {timestamp_to_readable(panel_expire)}")

            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î (panel_username = user_id –≤ –ë–î)
                db_user = await db.get_user_by_panel_username(panel_username)
                
                if db_user is None:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
                    logger.info(f"‚ûï –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {panel_username} –≤ –ë–î")
                    
                    success = await db.create_user(panel_username, panel_expire)
                    if success:
                        stats['users_created'] += 1
                        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {panel_username} —Å–æ–∑–¥–∞–Ω –≤ –ë–î")
                    else:
                        stats['errors'] += 1
                
                else:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞—Ç—ã
                    db_expire = db_user.get(DB_SETTINGS['expire_column'])
                    
                    if db_expire and db_expire > 0:
                        logger.info(f"   üìÖ –í –ë–î –¥–æ: {timestamp_to_readable(db_expire)}")
                        
                        if panel_expire > db_expire:
                            # –ü–æ–¥–ø–∏—Å–∫–∞ –≤ –ø–∞–Ω–µ–ª–∏ –¥–ª–∏–Ω–Ω–µ–µ - –æ–±–Ω–æ–≤–ª—è–µ–º –ë–î
                            logger.info(f"‚¨ÜÔ∏è –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è {panel_username}")
                            
                            success = await db.update_user_subscription(panel_username, panel_expire)
                            if success:
                                stats['users_updated'] += 1
                                logger.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ {panel_username} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –ë–î")
                            else:
                                stats['errors'] += 1
                        else:
                            # –ü–æ–¥–ø–∏—Å–∫–∞ –≤ –ë–î –¥–ª–∏–Ω–Ω–µ–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ - –æ—Å—Ç–∞–≤–ª—è–µ–º
                            logger.info(f"‚è≠Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ {panel_username} –≤ –ë–î –∞–∫—Ç—É–∞–ª—å–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                            stats['users_skipped'] += 1
                    else:
                        # –í –ë–î –Ω–µ—Ç –¥–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –æ–Ω–∞ 0 - –æ–±–Ω–æ–≤–ª—è–µ–º
                        logger.info(f"‚¨ÜÔ∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è {panel_username} (–±—ã–ª–∞ –ø—É—Å—Ç–∞—è)")
                        
                        success = await db.update_user_subscription(panel_username, panel_expire)
                        if success:
                            stats['users_updated'] += 1
                        else:
                            stats['errors'] += 1

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {panel_username}: {e}")
                stats['errors'] += 1

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            await asyncio.sleep(0.1)

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
        db_stats_after = await db.get_database_stats()
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        logger.info(f"""
üéØ === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–ò–ì–†–ê–¶–ò–ò ===
üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–Ω–µ–ª–∏: {stats['panel_users']}
‚úÖ –° –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏: {stats['users_with_subscriptions']}
‚ûï –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö: {stats['users_created']}
‚¨ÜÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ: {stats['users_updated']}
‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats['users_skipped']}
‚ùå –û—à–∏–±–æ–∫: {stats['errors']}

üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–î:
   –î–æ:  {db_stats_before['total_users']} –≤—Å–µ–≥–æ, {db_stats_before['active_subscriptions']} –∞–∫—Ç–∏–≤–Ω—ã—Ö
   –ü–æ—Å–ª–µ: {db_stats_after['total_users']} –≤—Å–µ–≥–æ, {db_stats_after['active_subscriptions']} –∞–∫—Ç–∏–≤–Ω—ã—Ö
==============================
""")

async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    try:
        await migrate_panel_to_database()
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    print("üîÑ –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–∞–Ω–µ–ª–∏ Marzban –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    print("‚ö†Ô∏è  –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ë–î –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü!")
    print()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    print("üîß –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print(f"   üîó –ü–∞–Ω–µ–ª—å: {MARZBAN_API_URL}")
    print(f"   üóÑÔ∏è  –ë–î: {DB_CONFIG['host']}:{DB_CONFIG['port']}/{DB_CONFIG['database']}")
    print(f"   üìã –¢–∞–±–ª–∏—Ü–∞: {DB_SETTINGS['table_name']}")
    print(f"   üîó –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: –ø–∞–Ω–µ–ª—å.username = –ë–î.user_id")
    print(f"   üìÖ –ö–æ–ª–æ–Ω–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {DB_SETTINGS['expire_column']} (bigint timestamp)")
    print("   ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–∫–ª—é—á–µ–Ω–æ")
    print()
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é? (y/N): ").strip().lower()
    if response not in ['y', 'yes', '–¥–∞']:
        print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        exit(0)
    
    asyncio.run(main())
