import asyncio
import logging
import time
from typing import Dict, List, Set, Optional
import aiohttp
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
format = '[%(asctime)s] #%(levelname)-15s %(filename)s: %(lineno)d - %(message)s'
logging.basicConfig(level=logging.INFO, format=format)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞–Ω–µ–ª–µ–π
PANEL_1_CONFIG = {
    'name': '–û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å (World)',
    'url': 'https://ivvpn.world:6655',
    'username': 'iv',
    'password': 'URV3dEbbpK'
}

PANEL_2_CONFIG = {
    'name': '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º–∞—è –ø–∞–Ω–µ–ª—å (Moba)',
    'url': 'https://mob.ivvpn.world:8443',
    'username': 'iv',
    'password': 'OoRmc1872C3a'
}

class MarzbanPanel:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞–Ω–µ–ª—å—é Marzban"""
    
    def __init__(self, config: Dict, panel_name: str):
        self.config = config
        self.panel_name = panel_name
        self.session = None
        self.headers = {"accept": "application/json"}
        self.base_url = config['url']

    async def __aenter__(self):
        connector = aiohttp.TCPConnector(ssl=False)
        timeout = aiohttp.ClientTimeout(total=30, connect=10)
        
        self.session = aiohttp.ClientSession(
            connector=connector,
            timeout=timeout
        )

        success = await self.authorize()
        if not success:
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ {self.panel_name}")
        
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()

    async def authorize(self) -> bool:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –ø–∞–Ω–µ–ª–∏"""
        data = {
            "username": self.config['username'],
            "password": self.config['password'],
        }

        try:
            async with self.session.post(f"{self.base_url}/api/admin/token", data=data) as response:
                if response.status == 200:
                    result = await response.json()
                    token = result.get("access_token")
                    self.headers["Authorization"] = f"Bearer {token}"
                    logger.info(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ {self.panel_name} —É—Å–ø–µ—à–Ω–∞")
                    return True
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ {self.panel_name}: {response.status}")
                    return False
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ {self.panel_name}: {e}")
            return False

    async def get_all_users(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            async with self.session.get(f"{self.base_url}/api/users/", headers=self.headers) as response:
                if response.status in (200, 201):
                    result = await response.json()
                    users = result.get('users', [])
                    logger.info(f"üìä {self.panel_name}: –ø–æ–ª—É—á–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                    return users
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ {self.panel_name}: {response.status}")
                    return []
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ {self.panel_name}: {e}")
            return []

    async def get_user(self, username: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with self.session.get(f"{self.base_url}/api/user/{username}", headers=self.headers) as response:
                if response.status in (200, 201):
                    return await response.json()
                elif response.status == 404:
                    return None
                else:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –∏–∑ {self.panel_name}: {response.status}")
                    return None
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –∏–∑ {self.panel_name}: {e}")
            return None

    async def create_user(self, username: str, user_data: Dict) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        data = {
            "username": username,
            "proxies": user_data.get("proxies", {"vless": {"flow": "xtls-rprx-vision"}}),
            "inbounds": user_data.get("inbounds", {"vless": ["VLESS TCP REALITY"]}),
            "expire": user_data.get("expire", 0),
            "data_limit": user_data.get("data_limit", 0),
            "status": user_data.get("status", "active")
        }

        try:
            async with self.session.post(f"{self.base_url}/api/user/", headers=self.headers, json=data) as response:
                if response.status in (200, 201):
                    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —Å–æ–∑–¥–∞–Ω –≤ {self.panel_name}")
                    return True
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –≤ {self.panel_name}: {response.status}")
                    response_text = await response.text()
                    logger.error(f"   –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response_text}")
                    return False
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –≤ {self.panel_name}: {e}")
            return False

    async def update_user_expire(self, username: str, expire_time: int) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        data = {"expire": expire_time}

        try:
            async with self.session.put(f"{self.base_url}/api/user/{username}", headers=self.headers, json=data) as response:
                if response.status in (200, 201):
                    logger.info(f"‚úÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {username} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ {self.panel_name}")
                    return True
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ {username} –≤ {self.panel_name}: {response.status}")
                    return False
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ {username} –≤ {self.panel_name}: {e}")
            return False

    async def delete_user(self, username: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with self.session.delete(f"{self.base_url}/api/user/{username}", headers=self.headers) as response:
                if response.status in (200, 201):
                    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–¥–∞–ª–µ–Ω –∏–∑ {self.panel_name}")
                    return True
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –∏–∑ {self.panel_name}: {response.status}")
                    return False
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –∏–∑ {self.panel_name}: {e}")
            return False


class PanelSynchronizer:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–∞–Ω–µ–ª–µ–π"""
    
    def __init__(self):
        self.panel_1 = None  # –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å
        self.panel_2 = None  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º–∞—è –ø–∞–Ω–µ–ª—å
        
    async def __aenter__(self):
        self.panel_1 = await MarzbanPanel(PANEL_1_CONFIG, "–ü–∞–Ω–µ–ª—å 1 (–û—Å–Ω–æ–≤–Ω–∞—è)").__aenter__()
        self.panel_2 = await MarzbanPanel(PANEL_2_CONFIG, "–ü–∞–Ω–µ–ª—å 2 (–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º–∞—è)").__aenter__()
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.panel_1:
            await self.panel_1.__aexit__(exc_type, exc_val, exc_tb)
        if self.panel_2:
            await self.panel_2.__aexit__(exc_type, exc_val, exc_tb)

    def timestamp_to_readable(self, timestamp) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è timestamp –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        if timestamp is None or timestamp == 0:
            return "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
        try:
            return datetime.fromtimestamp(timestamp).strftime('%Y-%m-%d %H:%M:%S')
        except (TypeError, ValueError, OSError):
            return f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ ({timestamp})"

    async def full_sync(self, dry_run: bool = False) -> Dict:
        """–ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ 2 —Å –ø–∞–Ω–µ–ª—å—é 1"""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–∞–Ω–µ–ª–µ–π...")
        
        if dry_run:
            logger.info("üîç –†–ï–ñ–ò–ú –ü–†–ï–î–ü–†–û–°–ú–û–¢–†–ê - –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
        
        stats = {
            'users_to_create': 0,
            'users_to_update': 0,
            'users_to_delete': 0,
            'users_created': 0,
            'users_updated': 0,
            'users_deleted': 0,
            'errors': 0,
            'actions': []
        }

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–±–µ–∏—Ö –ø–∞–Ω–µ–ª–µ–π
        logger.info("üìã –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        panel_1_users = await self.panel_1.get_all_users()
        panel_2_users = await self.panel_2.get_all_users()

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        panel_1_dict = {user['username']: user for user in panel_1_users}
        panel_2_dict = {user['username']: user for user in panel_2_users}

        panel_1_usernames = set(panel_1_dict.keys())
        panel_2_usernames = set(panel_2_dict.keys())

        logger.info(f"üìä –ü–∞–Ω–µ–ª—å 1: {len(panel_1_usernames)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        logger.info(f"üìä –ü–∞–Ω–µ–ª—å 2: {len(panel_2_usernames)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        # 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è (–µ—Å—Ç—å –≤ –ø–∞–Ω–µ–ª–∏ 1, –Ω–µ—Ç –≤ –ø–∞–Ω–µ–ª–∏ 2)
        users_to_create = panel_1_usernames - panel_2_usernames
        stats['users_to_create'] = len(users_to_create)
        
        if users_to_create:
            logger.info(f"‚ûï –ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å {len(users_to_create)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            for username in users_to_create:
                user_data = panel_1_dict[username]
                expire_time = user_data.get('expire')
                
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ expire
                expire_time = expire_time if expire_time is not None else 0
                
                action = {
                    'type': 'create',
                    'username': username,
                    'expire': expire_time,
                    'expire_readable': self.timestamp_to_readable(expire_time)
                }
                stats['actions'].append(action)
                
                logger.info(f"   üìù –°–æ–∑–¥–∞—Ç—å: {username} (–ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {action['expire_readable']})")
                
                if not dry_run:
                    success = await self.panel_2.create_user(username, user_data)
                    if success:
                        stats['users_created'] += 1
                    else:
                        stats['errors'] += 1
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    await asyncio.sleep(0.2)

        # 2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–µ—Å—Ç—å –≤ –æ–±–µ–∏—Ö –ø–∞–Ω–µ–ª—è—Ö, –Ω–æ —Ä–∞–∑–Ω—ã–µ –¥–∞—Ç—ã)
        common_users = panel_1_usernames & panel_2_usernames
        users_to_update = []
        
        for username in common_users:
            panel_1_expire = panel_1_dict[username].get('expire')
            panel_2_expire = panel_2_dict[username].get('expire')
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è (None -> 0)
            panel_1_expire = panel_1_expire if panel_1_expire is not None else 0
            panel_2_expire = panel_2_expire if panel_2_expire is not None else 0
            
            if panel_1_expire != panel_2_expire:
                users_to_update.append({
                    'username': username,
                    'panel_1_expire': panel_1_expire,
                    'panel_2_expire': panel_2_expire
                })

        stats['users_to_update'] = len(users_to_update)
        
        if users_to_update:
            logger.info(f"üîÑ –ù—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å {len(users_to_update)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            for user_info in users_to_update:
                username = user_info['username']
                new_expire = user_info['panel_1_expire']
                old_expire = user_info['panel_2_expire']
                
                action = {
                    'type': 'update',
                    'username': username,
                    'old_expire': old_expire,
                    'new_expire': new_expire,
                    'old_expire_readable': self.timestamp_to_readable(old_expire),
                    'new_expire_readable': self.timestamp_to_readable(new_expire)
                }
                stats['actions'].append(action)
                
                logger.info(f"   üîÑ –û–±–Ω–æ–≤–∏—Ç—å: {username}")
                logger.info(f"      –ë—ã–ª–æ: {action['old_expire_readable']}")
                logger.info(f"      –°—Ç–∞–ª–æ: {action['new_expire_readable']}")
                
                if not dry_run:
                    success = await self.panel_2.update_user_expire(username, new_expire)
                    if success:
                        stats['users_updated'] += 1
                    else:
                        stats['errors'] += 1
                    
                    await asyncio.sleep(0.1)

        # 3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–µ—Å—Ç—å –≤ –ø–∞–Ω–µ–ª–∏ 2, –Ω–µ—Ç –≤ –ø–∞–Ω–µ–ª–∏ 1)
        users_to_delete = panel_2_usernames - panel_1_usernames
        stats['users_to_delete'] = len(users_to_delete)
        
        if users_to_delete:
            logger.info(f"üóëÔ∏è –ù—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å {len(users_to_delete)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            for username in users_to_delete:
                user_data = panel_2_dict[username]
                expire_time = user_data.get('expire')
                
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ expire
                expire_time = expire_time if expire_time is not None else 0
                
                action = {
                    'type': 'delete',
                    'username': username,
                    'expire': expire_time,
                    'expire_readable': self.timestamp_to_readable(expire_time)
                }
                stats['actions'].append(action)
                
                logger.info(f"   üóëÔ∏è –£–¥–∞–ª–∏—Ç—å: {username} (–ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –¥–æ: {action['expire_readable']})")
                
                if not dry_run:
                    success = await self.panel_2.delete_user(username)
                    if success:
                        stats['users_deleted'] += 1
                    else:
                        stats['errors'] += 1
                    
                    await asyncio.sleep(0.1)

        return stats

    async def sync_user(self, username: str, dry_run: bool = False) -> Dict:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.info(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")
        
        if dry_run:
            logger.info("üîç –†–ï–ñ–ò–ú –ü–†–ï–î–ü–†–û–°–ú–û–¢–†–ê")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏
        panel_1_user = await self.panel_1.get_user(username)
        if not panel_1_user:
            return {
                'success': False,
                'message': f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏",
                'action': 'none'
            }

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ –≤—Ç–æ—Ä–æ–π –ø–∞–Ω–µ–ª–∏
        panel_2_user = await self.panel_2.get_user(username)
        
        if not panel_2_user:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤–æ –≤—Ç–æ—Ä–æ–π –ø–∞–Ω–µ–ª–∏ - —Å–æ–∑–¥–∞–µ–º
            logger.info(f"‚ûï –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –≤–æ –≤—Ç–æ—Ä–æ–π –ø–∞–Ω–µ–ª–∏")
            
            if not dry_run:
                success = await self.panel_2.create_user(username, panel_1_user)
                if success:
                    return {
                        'success': True,
                        'message': f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —Å–æ–∑–¥–∞–Ω –≤–æ –≤—Ç–æ—Ä–æ–π –ø–∞–Ω–µ–ª–∏",
                        'action': 'created'
                    }
                else:
                    return {
                        'success': False,
                        'message': f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –≤–æ –≤—Ç–æ—Ä–æ–π –ø–∞–Ω–µ–ª–∏",
                        'action': 'error'
                    }
            else:
                return {
                    'success': True,
                    'message': f"üîç [–ü–†–ï–î–ü–†–û–°–ú–û–¢–†] –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username}",
                    'action': 'would_create'
                }
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –æ–±–µ–∏—Ö –ø–∞–Ω–µ–ª—è—Ö - –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—ã
            panel_1_expire = panel_1_user.get('expire')
            panel_2_expire = panel_2_user.get('expire')
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è (None -> 0)
            panel_1_expire = panel_1_expire if panel_1_expire is not None else 0
            panel_2_expire = panel_2_expire if panel_2_expire is not None else 0
            
            if panel_1_expire != panel_2_expire:
                logger.info(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {username}")
                logger.info(f"   –ü–∞–Ω–µ–ª—å 1: {self.timestamp_to_readable(panel_1_expire)}")
                logger.info(f"   –ü–∞–Ω–µ–ª—å 2: {self.timestamp_to_readable(panel_2_expire)}")
                
                if not dry_run:
                    success = await self.panel_2.update_user_expire(username, panel_1_expire)
                    if success:
                        return {
                            'success': True,
                            'message': f"‚úÖ –î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {username} –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
                            'action': 'updated',
                            'old_expire': panel_2_expire,
                            'new_expire': panel_1_expire
                        }
                    else:
                        return {
                            'success': False,
                            'message': f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {username}",
                            'action': 'error'
                        }
                else:
                    return {
                        'success': True,
                        'message': f"üîç [–ü–†–ï–î–ü–†–û–°–ú–û–¢–†] –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è {username}",
                        'action': 'would_update',
                        'old_expire': panel_2_expire,
                        'new_expire': panel_1_expire
                    }
            else:
                return {
                    'success': True,
                    'message': f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω",
                    'action': 'already_synced'
                }


async def sync_panels(dry_run: bool = False):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    try:
        async with PanelSynchronizer() as sync:
            stats = await sync.full_sync(dry_run=dry_run)
            
            # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            mode_text = "–ü–†–ï–î–ü–†–û–°–ú–û–¢–†" if dry_run else "–í–´–ü–û–õ–ù–ï–ù–û"
            logger.info(f"""
üéØ === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò ({mode_text}) ===
‚ûï –°–æ–∑–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users_created']}/{stats['users_to_create']}
üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users_updated']}/{stats['users_to_update']}
üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users_deleted']}/{stats['users_to_delete']}
‚ùå –û—à–∏–±–æ–∫: {stats['errors']}
üìä –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {len(stats['actions'])}
=======================================
""")
            
            if dry_run and stats['actions']:
                logger.info("üìã –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
                for action in stats['actions'][:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    if action['type'] == 'create':
                        logger.info(f"   ‚ûï –°–æ–∑–¥–∞—Ç—å: {action['username']} (–¥–æ {action['expire_readable']})")
                    elif action['type'] == 'update':
                        logger.info(f"   üîÑ –û–±–Ω–æ–≤–∏—Ç—å: {action['username']} ({action['old_expire_readable']} ‚Üí {action['new_expire_readable']})")
                    elif action['type'] == 'delete':
                        logger.info(f"   üóëÔ∏è –£–¥–∞–ª–∏—Ç—å: {action['username']}")
                
                if len(stats['actions']) > 10:
                    logger.info(f"   ... –∏ –µ—â–µ {len(stats['actions']) - 10} –¥–µ–π—Å—Ç–≤–∏–π")
            
            return stats
            
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        raise


async def sync_single_user(username: str, dry_run: bool = False):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        async with PanelSynchronizer() as sync:
            result = await sync.sync_user(username, dry_run=dry_run)
            logger.info(result['message'])
            return result
            
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {e}")
        raise


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import sys

    print("üîÑ –°–∫—Ä–∏–ø—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–∞–Ω–µ–ª–µ–π Marzban")
    print("üìå –ü–∞–Ω–µ–ª—å 1 (–æ—Å–Ω–æ–≤–Ω–∞—è) ‚Üí –ü–∞–Ω–µ–ª—å 2 (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º–∞—è)")
    print()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥–∏
    auto_yes = '--auto-yes' in sys.argv
    dry_run = '--dry-run' in sys.argv or '-d' in sys.argv
    
    # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    args = [arg for arg in sys.argv[1:] if not arg.startswith('--') and not arg.startswith('-')]

    if auto_yes:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º - –ø–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        print("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º (--auto-yes)")
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
        print()
        await sync_panels(dry_run=False)
        
    elif len(args) > 0:
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username = args[0]
        
        print(f"üë§ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")
        if dry_run:
            print("üîç –†–µ–∂–∏–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
        print()

        await sync_single_user(username, dry_run=dry_run)
        
    else:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        print("üîß –†–µ–∂–∏–º—ã –∑–∞–ø—É—Å–∫–∞:")
        print("   1. –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)")
        print("   2. –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è")
        print("   3. –û—Ç–º–µ–Ω–∞")
        print()

        while True:
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (1/2/3): ").strip()

            if choice == '1':
                print("\nüîç –ó–∞–ø—É—Å–∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞...")
                await sync_panels(dry_run=True)
                break
            elif choice == '2':
                print("\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ –∏–∑–º–µ–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ç–æ—Ä–æ–π –ø–∞–Ω–µ–ª–∏!")
                confirm = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ").strip().lower()

                if confirm in ['yes', 'y', '–¥–∞']:
                    print("\nüöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
                    await sync_panels(dry_run=False)
                else:
                    print("‚ùå –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                break
            elif choice == '3':
                print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")

if __name__ == "__main__":
    asyncio.run(main())
