from config_data.config import load_config_ref
from dataclasses import dataclass, asdict
from environs import Env
from typing import Dict, Any, List, Optional

@dataclass
class Refferal:
    invited: int
    who_invite: int
    bonus_status: bool | None


config = load_config_ref('.env')
bot_name = config.bot_name

def generate_refferal_code(invited: int) -> str:
    return f"https://t.me/{bot_name}?start={invited}"


def insert_ref(invited: int, who_invite: int) -> Dict[str, Any]:
    refferal = Refferal(invited, who_invite, False)
    return asdict(refferal)

# –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
ref_base: List[Dict[str, Any]] = []

def is_user_already_invited(invited: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω"""
    return any(ref['invited'] == invited for ref in ref_base)

def get_referrer(invited: int) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    for ref in ref_base:
        if ref['invited'] == invited:
            return ref
    return None

def would_create_cycle(invited: int, who_invite: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–∑–¥–∞—Å—Ç –ª–∏ –Ω–æ–≤–∞—è —Å–≤—è–∑—å —Ü–∏–∫–ª–∏—á–µ—Å–∫—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å"""
    # –ï—Å–ª–∏ who_invite —É–∂–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω –∫–µ–º-—Ç–æ –≤ —Ü–µ–ø–æ—á–∫–µ –æ—Ç invited, —Ç–æ —ç—Ç–æ —Ü–∏–∫–ª

    def get_all_referrers(current_user: int, visited: set) -> set:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤ –≤ —Ü–µ–ø–æ—á–∫–µ"""
        if current_user in visited:
            return set()  # –ò–∑–±–µ–≥–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π —Ä–µ–∫—É—Ä—Å–∏–∏

        visited.add(current_user)
        referrers = set()

        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö, –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª current_user
        for ref in ref_base:
            if ref['invited'] == current_user:
                referrers.add(ref['who_invite'])
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤ —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤
                referrers.update(get_all_referrers(ref['who_invite'], visited.copy()))

        return referrers

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤ who_invite
    all_referrers_of_ref = get_all_referrers(who_invite, set())

    # –ï—Å–ª–∏ invited —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–º who_invite, —Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∏ invited -> who_invite —Å–æ–∑–¥–∞—Å—Ç —Ü–∏–∫–ª
    return invited in all_referrers_of_ref

def append_ref_base(invited: int, who_invite: int) -> Dict[str, Any]:
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–≤—è–∑—å —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""

    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {invited} -> {who_invite}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Å–∞–º —Å–µ–±—è
    if invited == who_invite:
        raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–º —Å–∞–º–æ–≥–æ —Å–µ–±—è")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –±—ã–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω
    if is_user_already_invited(invited):
        existing_ref = get_referrer(invited)
        raise ValueError(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {invited} —É–∂–µ –±—ã–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {existing_ref['who_invite']}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if would_create_cycle(invited, who_invite):
        raise ValueError(f"–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∏ {invited} -> {who_invite} –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")

    ref_data = insert_ref(invited, who_invite)
    ref_base.append(ref_data)
    print(f"‚úÖ –°–≤—è–∑—å –¥–æ–±–∞–≤–ª–µ–Ω–∞: {ref_data}")
    return ref_data

async def safe_add_referral(invited: int, who_invite: int):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–≤—è–∑–∏"""
    try:
        result = append_ref_base(invited, who_invite)
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {invited} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ä–µ—Ñ–µ—Ä–µ—Ä—É {who_invite}")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        print(f"–¢–µ–∫—É—â–∞—è –±–∞–∑–∞: {ref_base}")
        return result
    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None